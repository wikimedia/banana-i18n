{"version":3,"file":"banana-i18n.js","sources":["../../src/languages/language.js","../../src/languages/he.js","../../src/languages/bs.js","../../src/languages/dsb.js","../../src/languages/hsb.js","../../src/languages/fi.js","../../src/languages/ru.js","../../src/languages/sl.js","../../src/languages/la.js","../../src/languages/hy.js","../../src/languages/ga.js","../../src/languages/hu.js","../../src/languages/os.js","../../src/languages/uk.js","../../src/languages/index.js","../../src/emitter.js","../../src/ast.js","../../src/parser.js","../../src/messagestore.js","../../src/index.js"],"sourcesContent":["import DIGITTRANSFORMTABLE from './digit-transform.json' with { type: 'json' }\nimport fallbacks from './fallbacks.json' with { type: 'json' }\n\nexport default class BananaLanguage {\n  constructor (locale) {\n    this.locale = locale\n  }\n\n  /**\n   * Plural form transformations, needed for some languages.\n   *\n   * @param {integer} count Non-localized quantifier\n   * @param {Array} forms List of plural forms\n   * @return {string} Correct form for quantifier in this language\n  */\n  convertPlural (count, forms) {\n    const explicitPluralPattern = /\\d+=/i\n\n    if (!forms || forms.length === 0) {\n      return ''\n    }\n\n    // Handle for Explicit 0= & 1= values\n    for (let index = 0; index < forms.length; index++) {\n      const form = forms[index]\n      if (explicitPluralPattern.test(form)) {\n        const formCount = parseInt(form.slice(0, form.indexOf('=')), 10)\n        if (formCount === count) {\n          return (form.slice(form.indexOf('=') + 1))\n        }\n        forms[index] = undefined\n      }\n    }\n\n    forms = forms.filter((form) => !!form)\n\n    let pluralFormIndex = this.getPluralForm(count, this.locale)\n    pluralFormIndex = Math.min(pluralFormIndex, forms.length - 1)\n\n    return forms[pluralFormIndex]\n  }\n\n  /**\n   * For the number, get the plural for index\n   *\n   * @param {integer} number\n   * @param {string} locale\n   * @return {integer} plural form index\n   */\n  getPluralForm (number, locale) {\n    // Allowed forms as per CLDR spec\n    const pluralForms = ['zero', 'one', 'two', 'few', 'many', 'other']\n    // Create an instance of Intl PluralRules. If the locale is invalid or\n    // not supported, it fallbacks to `en`.\n    const pluralRules = new Intl.PluralRules(locale)\n    // For a locale, find the plural categories\n    const pluralCategories = pluralRules.resolvedOptions().pluralCategories\n    // Get the plural form. `select` method return values are like 'one', 'few' etc.\n    const form = pluralRules.select(number)\n    // The index of form we need to return is the index in pluralCategories.\n    // And the index should be based on the order defined in pluralForms above.\n    // So we need make sure pluralCategories follow same order as in pluralForms.\n    // For that, get an intersection of pluralForms and pluralCategories.\n    const pluralFormIndex = pluralForms.filter(f => pluralCategories.includes(f)).indexOf(form)\n    return pluralFormIndex\n  }\n\n  /**\n   * Converts a number using digitTransformTable.\n   *\n   * @param {number} num Value to be converted\n   * @param {boolean} integer Convert the return value to an integer\n   * @return {string} The number converted into a String.\n   */\n  convertNumber (num, integer = false) {\n    // Set the target Transform table:\n    let transformTable = this.digitTransformTable(this.locale)\n    let convertedNumber = ''\n\n    // Check if the restore to Latin number flag is set:\n    if (integer) {\n      if (parseFloat(num, 10) === num) {\n        return num\n      }\n\n      if (!transformTable) {\n        return num\n      }\n\n      // Reverse the digit transformation tables if we are doing unformatting\n      const tmp = []\n      for (const item in transformTable) {\n        tmp[transformTable[item]] = item\n      }\n      transformTable = tmp\n\n      const numberString = String(num)\n      for (let i = 0; i < numberString.length; i++) {\n        convertedNumber += transformTable[numberString[i]] || numberString[i]\n      }\n      return parseFloat(convertedNumber, 10)\n    }\n\n    if (Intl.NumberFormat) {\n      let localeWithFallbacks\n      const fallbackLocales = [...fallbacks[this.locale] || [], 'en']\n      // Check if locale is supported or not\n      if (!Intl.NumberFormat.supportedLocalesOf(this.locale).length) {\n        localeWithFallbacks = fallbackLocales\n      } else {\n        localeWithFallbacks = [this.locale]\n      }\n\n      convertedNumber = new Intl.NumberFormat(localeWithFallbacks).format(num)\n      if (convertedNumber === 'NaN') {\n        // Invalid number. Return it as such.\n        convertedNumber = num\n      }\n      return convertedNumber\n    }\n  }\n\n  /**\n   * Grammatical transformations, needed for inflected languages.\n   * Invoked by putting {{grammar:form|word}} in a message.\n   * Override this method for languages that need special grammar rules\n   * applied dynamically.\n   *\n   * @param {string} word\n   * @param {string} form\n   * @return {string}\n   */\n\n  convertGrammar(word, /*form*/) {\n    return word\n  }\n\n  /**\n   * Provides an alternative text depending on specified gender. Usage\n   * {{gender:[gender|user object]|masculine|feminine|neutral}}. If second\n   * or third parameter are not specified, masculine is used.\n   *\n   * These details may be overriden per language.\n   *\n   * @param {string} gender male, female, or anything else for neutral.\n   * @param {Array} forms List of gender forms\n   * @return {string}\n   */\n  gender (gender, forms) {\n    if (!forms || forms.length === 0) {\n      return ''\n    }\n\n    while (forms.length < 2) {\n      forms.push(forms[forms.length - 1])\n    }\n\n    if (gender === 'male') {\n      return forms[0]\n    }\n\n    if (gender === 'female') {\n      return forms[1]\n    }\n\n    return (forms.length === 3) ? forms[2] : forms[0]\n  }\n\n  /**\n   * Get the digit transform table for the given language\n   * See http://cldr.unicode.org/translation/numbering-systems\n   *\n   * @param {string} language\n   * @return {Array|boolean} List of digits in the passed language or false\n   * representation, or boolean false if there is no information.\n   */\n  digitTransformTable (language) {\n    if (!DIGITTRANSFORMTABLE[language]) {\n      return false\n    }\n\n    return DIGITTRANSFORMTABLE[language].split('')\n  }\n}\n","/**\n * Hebrew (עברית) language functions\n */\nimport BananaLanguage from './language.js'\n\nexport default class HebrewLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'prefixed':\n      case 'תחילית': // the same word in Hebrew\n        // Duplicate prefixed \"Waw\", but only if it's not already double\n        if (word.slice(0, 1) === 'ו' && word.slice(0, 2) !== 'וו') {\n          word = 'ו' + word\n        }\n\n        // Remove the \"He\" if prefixed\n        if (word.slice(0, 1) === 'ה') {\n          word = word.slice(1)\n        }\n\n        // Add a hyphen (maqaf) before numbers and non-Hebrew letters\n        if (word.slice(0, 1) < 'א' || word.slice(0, 1) > 'ת') {\n          word = '־' + word\n        }\n    }\n\n    return word\n  }\n}\n","/**\n * Bosnian (bosanski) language functions\n */\nimport BananaLanguage from './language.js'\n\nexport default class BosnianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'instrumental': // instrumental\n        word = 's ' + word\n        break\n      case 'lokativ': // locative\n        word = 'o ' + word\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Lower Sorbian (Dolnoserbski) language functions\n */\nimport BananaLanguage from './language.js'\n\nexport default class DolnoserbskiLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'instrumental': // instrumental\n        word = 'z ' + word\n        break\n      case 'lokatiw': // lokatiw\n        word = 'wo ' + word\n        break\n    }\n    return word\n  }\n}\n","/**\n * Upper Sorbian (Hornjoserbsce) language functions\n */\nimport BananaLanguage from './language.js'\n\nexport default class HornjoserbsceLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'instrumental': // instrumental\n        word = 'z ' + word\n        break\n      case 'lokatiw': // lokatiw\n        word = 'wo ' + word\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Finnish (Suomi) language functions\n *\n * @author Santhosh Thottingal\n */\n\nimport BananaLanguage from './language.js'\n\nexport default class FinnishLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    // vowel harmony flag\n    let aou = word.match(/[aou][^äöy]*$/i)\n\n    const origWord = word\n    if (word.match(/wiki$/i)) {\n      aou = false\n    }\n\n    // append i after final consonant\n    if (word.match(/[bcdfghjklmnpqrstvwxz]$/i)) {\n      word += 'i'\n    }\n\n    switch (form) {\n      case 'genitive':\n        word += 'n'\n        break\n      case 'elative':\n        word += (aou ? 'sta' : 'stä')\n        break\n      case 'partitive':\n        word += (aou ? 'a' : 'ä')\n        break\n      case 'illative':\n        // Double the last letter and add 'n'\n        word += word.slice(-1) + 'n'\n        break\n      case 'inessive':\n        word += (aou ? 'ssa' : 'ssä')\n        break\n      default:\n        word = origWord\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Russian (Русский) language functions\n */\n\nimport BananaLanguage from './language.js'\n\nexport default class RussianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    if (form === 'genitive') { // родительный падеж\n      if (word.slice(-1) === 'ь') {\n        word = word.slice(0, -1) + 'я'\n      } else if (word.slice(-2) === 'ия') {\n        word = word.slice(0, -2) + 'ии'\n      } else if (word.slice(-2) === 'ка') {\n        word = word.slice(0, -2) + 'ки'\n      } else if (word.slice(-2) === 'ти') {\n        word = word.slice(0, -2) + 'тей'\n      } else if (word.slice(-2) === 'ды') {\n        word = word.slice(0, -2) + 'дов'\n      } else if (word.slice(-3) === 'ник') {\n        word = word.slice(0, -3) + 'ника'\n      }\n    }\n\n    return word\n  }\n}\n","/**\n * Slovenian (Slovenščina) language functions\n */\nimport BananaLanguage from './language.js'\n\nexport default class SlovenianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      // locative\n      case 'mestnik':\n        word = 'o ' + word\n        break\n        // instrumental\n      case 'orodnik':\n        word = 'z ' + word\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Latin (lingua Latina) language functions\n *\n */\nimport BananaLanguage from './language.js'\n\nexport default class LatinLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'genitive':\n        // only a few declensions, and even for those mostly the singular only\n        word = word.replace(/u[ms]$/i, 'i') // 2nd declension singular\n        word = word.replace(/ommunia$/i, 'ommunium') // 3rd declension neuter plural (partly)\n        word = word.replace(/a$/i, 'ae') // 1st declension singular\n        word = word.replace(/libri$/i, 'librorum') // 2nd declension plural (partly)\n        word = word.replace(/nuntii$/i, 'nuntiorum') // 2nd declension plural (partly)\n        word = word.replace(/tio$/i, 'tionis') // 3rd declension singular (partly)\n        word = word.replace(/ns$/i, 'ntis')\n        word = word.replace(/as$/i, 'atis')\n        word = word.replace(/es$/i, 'ei') // 5th declension singular\n        break\n      case 'accusative':\n        // only a few declensions, and even for those mostly the singular only\n        word = word.replace(/u[ms]$/i, 'um') // 2nd declension singular\n        word = word.replace(/ommunia$/i, 'am') // 3rd declension neuter plural (partly)\n        word = word.replace(/a$/i, 'ommunia') // 1st declension singular\n        word = word.replace(/libri$/i, 'libros') // 2nd declension plural (partly)\n        word = word.replace(/nuntii$/i, 'nuntios')// 2nd declension plural (partly)\n        word = word.replace(/tio$/i, 'tionem') // 3rd declension singular (partly)\n        word = word.replace(/ns$/i, 'ntem')\n        word = word.replace(/as$/i, 'atem')\n        word = word.replace(/es$/i, 'em') // 5th declension singular\n        break\n      case 'ablative':\n        // only a few declensions, and even for those mostly the singular only\n        word = word.replace(/u[ms]$/i, 'o') // 2nd declension singular\n        word = word.replace(/ommunia$/i, 'ommunibus') // 3rd declension neuter plural (partly)\n        word = word.replace(/a$/i, 'a') // 1st declension singular\n        word = word.replace(/libri$/i, 'libris') // 2nd declension plural (partly)\n        word = word.replace(/nuntii$/i, 'nuntiis') // 2nd declension plural (partly)\n        word = word.replace(/tio$/i, 'tione') // 3rd declension singular (partly)\n        word = word.replace(/ns$/i, 'nte')\n        word = word.replace(/as$/i, 'ate')\n        word = word.replace(/es$/i, 'e') // 5th declension singular\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Armenian (Հայերեն) language functions\n */\n\nimport BananaLanguage from './language.js'\n\nexport default class ArmenianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    if (form === 'genitive') { // սեռական հոլով\n      if (word.slice(-1) === 'ա') {\n        word = word.slice(0, -1) + 'այի'\n      } else if (word.slice(-1) === 'ո') {\n        word = word.slice(0, -1) + 'ոյի'\n      } else if (word.slice(-4) === 'գիրք') {\n        word = word.slice(0, -4) + 'գրքի'\n      } else {\n        word = word + 'ի'\n      }\n    }\n\n    return word\n  }\n}\n","/**\n * Irish (Gaeilge) language functions\n */\nimport BananaLanguage from './language.js'\n\nexport default class IrishLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    if (form === 'ainmlae') {\n      switch (word) {\n        case 'an Domhnach':\n          word = 'Dé Domhnaigh'\n          break\n        case 'an Luan':\n          word = 'Dé Luain'\n          break\n        case 'an Mháirt':\n          word = 'Dé Mháirt'\n          break\n        case 'an Chéadaoin':\n          word = 'Dé Chéadaoin'\n          break\n        case 'an Déardaoin':\n          word = 'Déardaoin'\n          break\n        case 'an Aoine':\n          word = 'Dé hAoine'\n          break\n        case 'an Satharn':\n          word = 'Dé Sathairn'\n          break\n      }\n    }\n\n    return word\n  }\n}\n","/**\n * Hungarian language functions\n *\n */\nimport BananaLanguage from './language.js'\n\nexport default class HungarianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'rol':\n        word += 'ról'\n        break\n      case 'ba':\n        word += 'ba'\n        break\n      case 'k':\n        word += 'k'\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Ossetian (Ирон) language functions\n *\n * @author Santhosh Thottingal\n */\nimport BananaLanguage from './language.js'\n\nexport default class OssetianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    let endAllative, jot, hyphen, ending\n\n    // Ending for allative case\n    endAllative = 'мæ'\n    // Variable for 'j' beetwen vowels\n    jot = ''\n    // Variable for \"-\" for not Ossetic words\n    hyphen = ''\n    // Variable for ending\n    ending = ''\n\n    if (word.match(/тæ$/i)) {\n      // Checking if the $word is in plural form\n      word = word.slice(0, -1)\n      endAllative = 'æм'\n    } else if (word.match(/[аæеёиоыэюя]$/i)) {\n      // Works if word is in singular form.\n      // Checking if word ends on one of the vowels: е, ё, и, о, ы, э, ю,\n      // я.\n      jot = 'й'\n    } else if (word.match(/у$/i)) {\n      // Checking if word ends on 'у'. 'У' can be either consonant 'W' or\n      // vowel 'U' in cyrillic Ossetic.\n      // Examples: {{grammar:genitive|аунеу}} = аунеуы,\n      // {{grammar:genitive|лæппу}} = лæппуйы.\n      if (!word.slice(-2, -1)\n        .match(/[аæеёиоыэюя]$/i)) {\n        jot = 'й'\n      }\n    } else if (!word.match(/[бвгджзйклмнопрстфхцчшщьъ]$/i)) {\n      hyphen = '-'\n    }\n\n    switch (form) {\n      case 'genitive':\n        ending = hyphen + jot + 'ы'\n        break\n      case 'dative':\n        ending = hyphen + jot + 'æн'\n        break\n      case 'allative':\n        ending = hyphen + endAllative\n        break\n      case 'ablative':\n        if (jot === 'й') {\n          ending = hyphen + jot + 'æ'\n        } else {\n          ending = hyphen + jot + 'æй'\n        }\n        break\n      case 'superessive':\n        ending = hyphen + jot + 'ыл'\n        break\n      case 'equative':\n        ending = hyphen + jot + 'ау'\n        break\n      case 'comitative':\n        ending = hyphen + 'имæ'\n        break\n    }\n\n    return word + ending\n  }\n}\n","/**\n * Ukrainian (Українська) language functions\n */\n\nimport BananaLanguage from './language.js'\n\nexport default class UkrainianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'genitive': // родовий відмінок\n        if (word.slice(-1) === 'ь') {\n          word = word.slice(0, -1) + 'я'\n        } else if (word.slice(-2) === 'ія') {\n          word = word.slice(0, -2) + 'ії'\n        } else if (word.slice(-2) === 'ка') {\n          word = word.slice(0, -2) + 'ки'\n        } else if (word.slice(-2) === 'ти') {\n          word = word.slice(0, -2) + 'тей'\n        } else if (word.slice(-2) === 'ды') {\n          word = word.slice(0, -2) + 'дов'\n        } else if (word.slice(-3) === 'ник') {\n          word = word.slice(0, -3) + 'ника'\n        }\n\n        break\n      case 'accusative': // знахідний відмінок\n        if (word.slice(-2) === 'ія') {\n          word = word.slice(0, -2) + 'ію'\n        }\n\n        break\n    }\n\n    return word\n  }\n}\n","import BananaLanguage from './language.js'\nimport HebrewLanguage from './he.js'\nimport BosnianLanguage from './bs.js'\nimport DolnoserbskiLanguage from './dsb.js'\nimport HornjoserbsceLanguage from './hsb.js'\nimport FinnishLanguage from './fi.js'\nimport RussianLanguage from './ru.js'\nimport SlovenianLanguage from './sl.js'\nimport LatinLanguage from './la.js'\nimport ArmenianLanguage from './hy.js'\nimport IrishLanguage from './ga.js'\nimport HungarianLanguage from './hu.js'\nimport OssetianLanguage from './os.js'\nimport UkrainianLanguage from './uk.js'\n\nexport default {\n  bs: BosnianLanguage,\n  default: BananaLanguage,\n  dsb: DolnoserbskiLanguage,\n  fi: FinnishLanguage,\n  ga: IrishLanguage,\n  he: HebrewLanguage,\n  hsb: HornjoserbsceLanguage,\n  hu: HungarianLanguage,\n  hy: ArmenianLanguage,\n  la: LatinLanguage,\n  os: OssetianLanguage,\n  ru: RussianLanguage,\n  sl: SlovenianLanguage,\n  uk: UkrainianLanguage\n}\n","import languages from './languages/index.js'\n\n/**\n * Matches the first strong directionality codepoint:\n * - in group 1 if it is LTR\n * - in group 2 if it is RTL\n * Does not match if there is no strong directionality codepoint.\n *\n * Generated by UnicodeJS (see tools/strongDir) from the UCD; see\n * https://phabricator.wikimedia.org/diffusion/GUJS/ .\n */\n\nconst strongDirRegExp = new RegExp(\n  /* eslint-disable-next-line no-misleading-character-class */\n  '(?:' +\n    '(' +\n    '[\\u0041-\\u005a\\u0061-\\u007a\\u00aa\\u00b5\\u00ba\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02b8\\u02bb-\\u02c1\\u02d0\\u02d1\\u02e0-\\u02e4\\u02ee\\u0370-\\u0373\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0482\\u048a-\\u052f\\u0531-\\u0556\\u0559-\\u055f\\u0561-\\u0587\\u0589\\u0903-\\u0939\\u093b\\u093d-\\u0940\\u0949-\\u094c\\u094e-\\u0950\\u0958-\\u0961\\u0964-\\u0980\\u0982\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd-\\u09c0\\u09c7\\u09c8\\u09cb\\u09cc\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e1\\u09e6-\\u09f1\\u09f4-\\u09fa\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3e-\\u0a40\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a6f\\u0a72-\\u0a74\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd-\\u0ac0\\u0ac9\\u0acb\\u0acc\\u0ad0\\u0ae0\\u0ae1\\u0ae6-\\u0af0\\u0af9\\u0b02\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b3e\\u0b40\\u0b47\\u0b48\\u0b4b\\u0b4c\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b66-\\u0b77\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe\\u0bbf\\u0bc1\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcc\\u0bd0\\u0bd7\\u0be6-\\u0bf2\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c41-\\u0c44\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c66-\\u0c6f\\u0c7f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd-\\u0cc4\\u0cc6-\\u0cc8\\u0cca\\u0ccb\\u0cd5\\u0cd6\\u0cde\\u0ce0\\u0ce1\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d40\\u0d46-\\u0d48\\u0d4a-\\u0d4c\\u0d4e\\u0d57\\u0d5f-\\u0d61\\u0d66-\\u0d75\\u0d79-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dcf-\\u0dd1\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2-\\u0df4\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e4f-\\u0e5b\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00-\\u0f17\\u0f1a-\\u0f34\\u0f36\\u0f38\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f7f\\u0f85\\u0f88-\\u0f8c\\u0fbe-\\u0fc5\\u0fc7-\\u0fcc\\u0fce-\\u0fda\\u1000-\\u102c\\u1031\\u1038\\u103b\\u103c\\u103f-\\u1057\\u105a-\\u105d\\u1061-\\u1070\\u1075-\\u1081\\u1083\\u1084\\u1087-\\u108c\\u108e-\\u109c\\u109e-\\u10c5\\u10c7\\u10cd\\u10d0-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1360-\\u137c\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u167f\\u1681-\\u169a\\u16a0-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1735\\u1736\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17b6\\u17be-\\u17c5\\u17c7\\u17c8\\u17d4-\\u17da\\u17dc\\u17e0-\\u17e9\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1923-\\u1926\\u1929-\\u192b\\u1930\\u1931\\u1933-\\u1938\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19da\\u1a00-\\u1a16\\u1a19\\u1a1a\\u1a1e-\\u1a55\\u1a57\\u1a61\\u1a63\\u1a64\\u1a6d-\\u1a72\\u1a80-\\u1a89\\u1a90-\\u1a99\\u1aa0-\\u1aad\\u1b04-\\u1b33\\u1b35\\u1b3b\\u1b3d-\\u1b41\\u1b43-\\u1b4b\\u1b50-\\u1b6a\\u1b74-\\u1b7c\\u1b82-\\u1ba1\\u1ba6\\u1ba7\\u1baa\\u1bae-\\u1be5\\u1be7\\u1bea-\\u1bec\\u1bee\\u1bf2\\u1bf3\\u1bfc-\\u1c2b\\u1c34\\u1c35\\u1c3b-\\u1c49\\u1c4d-\\u1c7f\\u1cc0-\\u1cc7\\u1cd3\\u1ce1\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200e\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u214f\\u2160-\\u2188\\u2336-\\u237a\\u2395\\u249c-\\u24e9\\u26ac\\u2800-\\u28ff\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d70\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u302e\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u3190-\\u31ba\\u31f0-\\u321c\\u3220-\\u324f\\u3260-\\u327b\\u327f-\\u32b0\\u32c0-\\u32cb\\u32d0-\\u32fe\\u3300-\\u3376\\u337b-\\u33dd\\u33e0-\\u33fe\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66e\\ua680-\\ua69d\\ua6a0-\\ua6ef\\ua6f2-\\ua6f7\\ua722-\\ua787\\ua789-\\ua7ad\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua824\\ua827\\ua830-\\ua837\\ua840-\\ua873\\ua880-\\ua8c3\\ua8ce-\\ua8d9\\ua8f2-\\ua8fd\\ua900-\\ua925\\ua92e-\\ua946\\ua952\\ua953\\ua95f-\\ua97c\\ua983-\\ua9b2\\ua9b4\\ua9b5\\ua9ba\\ua9bb\\ua9bd-\\ua9cd\\ua9cf-\\ua9d9\\ua9de-\\ua9e4\\ua9e6-\\ua9fe\\uaa00-\\uaa28\\uaa2f\\uaa30\\uaa33\\uaa34\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa4d\\uaa50-\\uaa59\\uaa5c-\\uaa7b\\uaa7d-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaaeb\\uaaee-\\uaaf5\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab65\\uab70-\\uabe4\\uabe6\\uabe7\\uabe9-\\uabec\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\ue000-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]|\\ud800[\\udc00-\\udc0b]|\\ud800[\\udc0d-\\udc26]|\\ud800[\\udc28-\\udc3a]|\\ud800\\udc3c|\\ud800\\udc3d|\\ud800[\\udc3f-\\udc4d]|\\ud800[\\udc50-\\udc5d]|\\ud800[\\udc80-\\udcfa]|\\ud800\\udd00|\\ud800\\udd02|\\ud800[\\udd07-\\udd33]|\\ud800[\\udd37-\\udd3f]|\\ud800[\\uddd0-\\uddfc]|\\ud800[\\ude80-\\ude9c]|\\ud800[\\udea0-\\uded0]|\\ud800[\\udf00-\\udf23]|\\ud800[\\udf30-\\udf4a]|\\ud800[\\udf50-\\udf75]|\\ud800[\\udf80-\\udf9d]|\\ud800[\\udf9f-\\udfc3]|\\ud800[\\udfc8-\\udfd5]|\\ud801[\\udc00-\\udc9d]|\\ud801[\\udca0-\\udca9]|\\ud801[\\udd00-\\udd27]|\\ud801[\\udd30-\\udd63]|\\ud801\\udd6f|\\ud801[\\ude00-\\udf36]|\\ud801[\\udf40-\\udf55]|\\ud801[\\udf60-\\udf67]|\\ud804\\udc00|\\ud804[\\udc02-\\udc37]|\\ud804[\\udc47-\\udc4d]|\\ud804[\\udc66-\\udc6f]|\\ud804[\\udc82-\\udcb2]|\\ud804\\udcb7|\\ud804\\udcb8|\\ud804[\\udcbb-\\udcc1]|\\ud804[\\udcd0-\\udce8]|\\ud804[\\udcf0-\\udcf9]|\\ud804[\\udd03-\\udd26]|\\ud804\\udd2c|\\ud804[\\udd36-\\udd43]|\\ud804[\\udd50-\\udd72]|\\ud804[\\udd74-\\udd76]|\\ud804[\\udd82-\\uddb5]|\\ud804[\\uddbf-\\uddc9]|\\ud804\\uddcd|\\ud804[\\uddd0-\\udddf]|\\ud804[\\udde1-\\uddf4]|\\ud804[\\ude00-\\ude11]|\\ud804[\\ude13-\\ude2e]|\\ud804\\ude32|\\ud804\\ude33|\\ud804\\ude35|\\ud804[\\ude38-\\ude3d]|\\ud804[\\ude80-\\ude86]|\\ud804\\ude88|\\ud804[\\ude8a-\\ude8d]|\\ud804[\\ude8f-\\ude9d]|\\ud804[\\ude9f-\\udea9]|\\ud804[\\udeb0-\\udede]|\\ud804[\\udee0-\\udee2]|\\ud804[\\udef0-\\udef9]|\\ud804\\udf02|\\ud804\\udf03|\\ud804[\\udf05-\\udf0c]|\\ud804\\udf0f|\\ud804\\udf10|\\ud804[\\udf13-\\udf28]|\\ud804[\\udf2a-\\udf30]|\\ud804\\udf32|\\ud804\\udf33|\\ud804[\\udf35-\\udf39]|\\ud804[\\udf3d-\\udf3f]|\\ud804[\\udf41-\\udf44]|\\ud804\\udf47|\\ud804\\udf48|\\ud804[\\udf4b-\\udf4d]|\\ud804\\udf50|\\ud804\\udf57|\\ud804[\\udf5d-\\udf63]|\\ud805[\\udc80-\\udcb2]|\\ud805\\udcb9|\\ud805[\\udcbb-\\udcbe]|\\ud805\\udcc1|\\ud805[\\udcc4-\\udcc7]|\\ud805[\\udcd0-\\udcd9]|\\ud805[\\udd80-\\uddb1]|\\ud805[\\uddb8-\\uddbb]|\\ud805\\uddbe|\\ud805[\\uddc1-\\udddb]|\\ud805[\\ude00-\\ude32]|\\ud805\\ude3b|\\ud805\\ude3c|\\ud805\\ude3e|\\ud805[\\ude41-\\ude44]|\\ud805[\\ude50-\\ude59]|\\ud805[\\ude80-\\udeaa]|\\ud805\\udeac|\\ud805\\udeae|\\ud805\\udeaf|\\ud805\\udeb6|\\ud805[\\udec0-\\udec9]|\\ud805[\\udf00-\\udf19]|\\ud805\\udf20|\\ud805\\udf21|\\ud805\\udf26|\\ud805[\\udf30-\\udf3f]|\\ud806[\\udca0-\\udcf2]|\\ud806\\udcff|\\ud806[\\udec0-\\udef8]|\\ud808[\\udc00-\\udf99]|\\ud809[\\udc00-\\udc6e]|\\ud809[\\udc70-\\udc74]|\\ud809[\\udc80-\\udd43]|\\ud80c[\\udc00-\\udfff]|\\ud80d[\\udc00-\\udc2e]|\\ud811[\\udc00-\\ude46]|\\ud81a[\\udc00-\\ude38]|\\ud81a[\\ude40-\\ude5e]|\\ud81a[\\ude60-\\ude69]|\\ud81a\\ude6e|\\ud81a\\ude6f|\\ud81a[\\uded0-\\udeed]|\\ud81a\\udef5|\\ud81a[\\udf00-\\udf2f]|\\ud81a[\\udf37-\\udf45]|\\ud81a[\\udf50-\\udf59]|\\ud81a[\\udf5b-\\udf61]|\\ud81a[\\udf63-\\udf77]|\\ud81a[\\udf7d-\\udf8f]|\\ud81b[\\udf00-\\udf44]|\\ud81b[\\udf50-\\udf7e]|\\ud81b[\\udf93-\\udf9f]|\\ud82c\\udc00|\\ud82c\\udc01|\\ud82f[\\udc00-\\udc6a]|\\ud82f[\\udc70-\\udc7c]|\\ud82f[\\udc80-\\udc88]|\\ud82f[\\udc90-\\udc99]|\\ud82f\\udc9c|\\ud82f\\udc9f|\\ud834[\\udc00-\\udcf5]|\\ud834[\\udd00-\\udd26]|\\ud834[\\udd29-\\udd66]|\\ud834[\\udd6a-\\udd72]|\\ud834\\udd83|\\ud834\\udd84|\\ud834[\\udd8c-\\udda9]|\\ud834[\\uddae-\\udde8]|\\ud834[\\udf60-\\udf71]|\\ud835[\\udc00-\\udc54]|\\ud835[\\udc56-\\udc9c]|\\ud835\\udc9e|\\ud835\\udc9f|\\ud835\\udca2|\\ud835\\udca5|\\ud835\\udca6|\\ud835[\\udca9-\\udcac]|\\ud835[\\udcae-\\udcb9]|\\ud835\\udcbb|\\ud835[\\udcbd-\\udcc3]|\\ud835[\\udcc5-\\udd05]|\\ud835[\\udd07-\\udd0a]|\\ud835[\\udd0d-\\udd14]|\\ud835[\\udd16-\\udd1c]|\\ud835[\\udd1e-\\udd39]|\\ud835[\\udd3b-\\udd3e]|\\ud835[\\udd40-\\udd44]|\\ud835\\udd46|\\ud835[\\udd4a-\\udd50]|\\ud835[\\udd52-\\udea5]|\\ud835[\\udea8-\\udeda]|\\ud835[\\udedc-\\udf14]|\\ud835[\\udf16-\\udf4e]|\\ud835[\\udf50-\\udf88]|\\ud835[\\udf8a-\\udfc2]|\\ud835[\\udfc4-\\udfcb]|\\ud836[\\udc00-\\uddff]|\\ud836[\\ude37-\\ude3a]|\\ud836[\\ude6d-\\ude74]|\\ud836[\\ude76-\\ude83]|\\ud836[\\ude85-\\ude8b]|\\ud83c[\\udd10-\\udd2e]|\\ud83c[\\udd30-\\udd69]|\\ud83c[\\udd70-\\udd9a]|\\ud83c[\\udde6-\\ude02]|\\ud83c[\\ude10-\\ude3a]|\\ud83c[\\ude40-\\ude48]|\\ud83c\\ude50|\\ud83c\\ude51|[\\ud840-\\ud868][\\udc00-\\udfff]|\\ud869[\\udc00-\\uded6]|\\ud869[\\udf00-\\udfff]|[\\ud86a-\\ud86c][\\udc00-\\udfff]|\\ud86d[\\udc00-\\udf34]|\\ud86d[\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d]|\\ud86e[\\udc20-\\udfff]|[\\ud86f-\\ud872][\\udc00-\\udfff]|\\ud873[\\udc00-\\udea1]|\\ud87e[\\udc00-\\ude1d]|[\\udb80-\\udbbe][\\udc00-\\udfff]|\\udbbf[\\udc00-\\udffd]|[\\udbc0-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udffd]' +\n    ')|(' +\n    '[\\u0590\\u05be\\u05c0\\u05c3\\u05c6\\u05c8-\\u05ff\\u07c0-\\u07ea\\u07f4\\u07f5\\u07fa-\\u0815\\u081a\\u0824\\u0828\\u082e-\\u0858\\u085c-\\u089f\\u200f\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb4f\\u0608\\u060b\\u060d\\u061b-\\u064a\\u066d-\\u066f\\u0671-\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u0710\\u0712-\\u072f\\u074b-\\u07a5\\u07b1-\\u07bf\\u08a0-\\u08e2\\ufb50-\\ufd3d\\ufd40-\\ufdcf\\ufdf0-\\ufdfc\\ufdfe\\ufdff\\ufe70-\\ufefe]|\\ud802[\\udc00-\\udd1e]|\\ud802[\\udd20-\\ude00]|\\ud802\\ude04|\\ud802[\\ude07-\\ude0b]|\\ud802[\\ude10-\\ude37]|\\ud802[\\ude3b-\\ude3e]|\\ud802[\\ude40-\\udee4]|\\ud802[\\udee7-\\udf38]|\\ud802[\\udf40-\\udfff]|\\ud803[\\udc00-\\ude5f]|\\ud803[\\ude7f-\\udfff]|\\ud83a[\\udc00-\\udccf]|\\ud83a[\\udcd7-\\udfff]|\\ud83b[\\udc00-\\uddff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\ude00-\\udeef]|\\ud83b[\\udef2-\\udeff]' +\n    ')' +\n    ')'\n)\n\nclass BananaEmitter {\n  constructor (locale) {\n    this.locale = normalizeLocale(locale)\n    this.language = new (languages[this.locale] || languages.default)(this.locale)\n  }\n\n  /**\n   * (We put this method definition here, and not in prototype, to make\n   * sure it's not overwritten by any magic.) Walk entire node structure,\n   * applying replacements and template functions when appropriate\n   *\n   * @param {Mixed} node abstract syntax tree (top node or subnode)\n   * @param {Array} replacements for $1, $2, ... $n\n   * @return {Mixed} single-string node or array of nodes suitable for\n   *  jQuery appending.\n   */\n  emit (node, replacements) {\n    let ret\n    let subnodes\n    let operation\n\n    switch (typeof node) {\n      case 'string':\n      case 'number':\n        ret = node\n        break\n      case 'object':\n        // node is an array of nodes\n        subnodes = node.slice(1).map((n) => this.emit(n, replacements))\n\n        operation = node[0].toLowerCase()\n\n        if (typeof this[operation] === 'function') {\n          ret = this[operation](subnodes, replacements)\n        } else {\n          throw new Error('unknown operation \"' + operation + '\"')\n        }\n\n        break\n      case 'undefined':\n        // Parsing the empty string (as an entire expression, or as a\n        // paramExpression in a template) results in undefined\n        // Perhaps a more clever parser can detect this, and return the\n        // empty string? Or is that useful information?\n        // The logical thing is probably to return the empty string here\n        // when we encounter undefined.\n        ret = ''\n        break\n      default:\n        throw new Error('unexpected type in AST: ' + typeof node)\n    }\n\n    return ret\n  }\n\n  /**\n   * Parsing has been applied depth-first we can assume that all nodes\n   * here are single nodes Must return a single node to parents -- a\n   * jQuery with synthetic span However, unwrap any other synthetic spans\n   * in our children and pass them upwards\n   *\n   * @param {Array} nodes Mixed, some single nodes, some arrays of nodes.\n   * @return {string}\n   */\n  concat (nodes) {\n    let result = ''\n\n    nodes.forEach((node) => {\n      // strings, integers, anything else\n      result += node\n    })\n\n    return result\n  }\n\n  /**\n   * Return escaped replacement of correct index, or string if\n   * unavailable. Note that we expect the parsed parameter to be\n   * zero-based. i.e. $1 should have become [ 0 ]. if the specified\n   * parameter is not found return the same string (e.g. \"$99\" ->\n    parameter 98 -> not found -> return \"$99\" ) TODO throw error if\n   * nodes.length > 1 ?\n   *\n   * @param {Array} nodes One element, integer, n >= 0\n   * @param {Array} replacements for $1, $2, ... $n\n   * @return {string} replacement\n   */\n  replace (nodes, replacements) {\n    const index = parseInt(nodes[0], 10)\n\n    if (index < replacements.length) {\n      // replacement is not a string, don't touch!\n      return replacements[index]\n    } else {\n      // index not found, fallback to displaying letiable\n      return '$' + (index + 1)\n    }\n  }\n\n  /**\n   * Transform parsed structure into pluralization n.b. The first node may\n   * be a non-integer (for instance, a string representing an Arabic\n   * number). So convert it back with the current language's\n   * convertNumber.\n   *\n   * @param {Array} nodes List [ {String|Number}, {String}, {String} ... ]\n   * @return {string} selected pluralized form according to current\n   *  language.\n   */\n  plural (nodes) {\n    const count = parseFloat(this.language.convertNumber(nodes[0], 10))\n    const forms = nodes.slice(1)\n    return forms.length ? this.language.convertPlural(count, forms) : ''\n  }\n\n  /**\n   * Transform parsed structure into gender Usage\n   * {{gender:gender|masculine|feminine|neutral}}.\n   * The first node(gender) must be one of 'male', 'female' or 'unknown'\n   * Mediawiki allows this string as empty to indicate current logged in user.\n   * But this library cannot access such user contexts unless explclitly passed.\n   * So we need to fallback to gender neutral if it is empty.\n   *\n   * @param {Array} nodes List [ {String}, {String}, {String} , {String} ]\n   * @return {string} selected gender form according to current language\n   */\n  gender (nodes) {\n    const gender = nodes[0]\n    const forms = nodes.slice(1)\n    return this.language.gender(gender, forms)\n  }\n\n  /**\n   * Transform parsed structure into grammar conversion. Invoked by\n   * putting {{grammar:form|word}} in a message\n   *\n   * @param {Array} nodes List [{Grammar case eg: genitive}, {String word}]\n   * @return {string} selected grammatical form according to current\n   *  language.\n   */\n  grammar (nodes) {\n    const form = nodes[0]\n    const word = nodes[1]\n    return word && form && this.language.convertGrammar(word, form)\n  }\n\n  /**\n   * Transform wiki-link\n   *\n   * @param {String[]} nodes\n   * @return {String}\n   */\n  wikilink (nodes) {\n    let anchor\n    let page = nodes[0]\n    // Strip leading ':', which is used to suppress special behavior in wikitext links,\n    // e.g. [[:Category:Foo]] or [[:File:Foo.jpg]]\n    if (page.charAt(0) === ':') {\n      page = page.slice(1)\n    }\n    const url = `./${page}`\n\n    if (nodes.length === 1) {\n      // [[Some Page]] or [[Namespace:Some Page]]\n      anchor = page\n    } else {\n      // [[Some Page|anchor text]] or [[Namespace:Some Page|anchor]]\n      anchor = nodes[1]\n    }\n\n    return `<a href=\"${url}\" title=\"${page}\">${anchor}</a>`\n  }\n\n  /**\n   * Transform parsed structure into external link.\n   *\n   * @param {String[]} nodes\n   * @return {String}\n   */\n  extlink (nodes) {\n    if (nodes.length !== 2) {\n      throw new Error('Expected two items in the node')\n    }\n    return `<a href=\"${nodes[0]}\">${nodes[1]}</a>`\n  }\n\n  /**\n   * Wraps argument with unicode control characters for directionality safety\n   *\n   * This solves the problem where directionality-neutral characters at the edge of\n   * the argument string get interpreted with the wrong directionality from the\n   * enclosing context, giving renderings that look corrupted like \"(Ben_(WMF\".\n   *\n   * The wrapping is LRE...PDF or RLE...PDF, depending on the detected\n   * directionality of the argument string, using the BIDI algorithm's own \"First\n   * strong directional codepoint\" rule. Essentially, this works round the fact that\n   * there is no embedding equivalent of U+2068 FSI (isolation with heuristic\n   * direction inference). The latter is cleaner but still not widely supported.\n   *\n   * @param {string[]} nodes The text nodes from which to take the first item.\n   * @return {string} Wrapped String of content as needed.\n   */\n  bidi (nodes) {\n    const dir = strongDirFromContent(nodes[0])\n    if (dir === 'ltr') {\n    // Wrap in LEFT-TO-RIGHT EMBEDDING ... POP DIRECTIONAL FORMATTING\n      return '\\u202A' + nodes[0] + '\\u202C'\n    }\n    if (dir === 'rtl') {\n    // Wrap in RIGHT-TO-LEFT EMBEDDING ... POP DIRECTIONAL FORMATTING\n      return '\\u202B' + nodes[0] + '\\u202C'\n    }\n    // No strong directionality: do not wrap\n    return nodes[0]\n  }\n\n  /**\n   * Takes an unformatted number (arab, no group separators and . as decimal separator)\n   * and outputs it in the localized digit script and formatted with decimal\n   * separator, according to the current language.\n   *\n   * @param {Array} nodes List of nodes\n   * @return {number|string} Formatted number\n   */\n  formatnum (nodes) {\n    const isInteger = !!nodes[1] && nodes[1] === 'R'\n    const number = nodes[0]\n    if (typeof number === 'string' || typeof number === 'number') {\n      return this.language.convertNumber(number, isInteger)\n    }\n    return number\n  }\n\n  /**\n   * Converts array of HTML element key value pairs to object\n   *\n   * @param {Array} nodes Array of consecutive key value pairs, with index 2 * n being a\n   *  name and 2 * n + 1 the associated value\n   * @return {Object} Object mapping attribute name to attribute value\n   */\n  htmlattributes (nodes) {\n    const mapping = {}\n    for (let i = 0, len = nodes.length; i < len; i += 2) {\n      mapping[nodes[i]] = nodes[i + 1]\n    }\n    return mapping\n  }\n\n  /**\n   * Handles an (already-validated) HTML element.\n   *\n   * @param {Array} nodes Nodes to process when creating element\n   * @return {string}\n   */\n  htmlelement (nodes) {\n    const tagName = nodes.shift()\n    /** @type {Object} */\n    const attributes = nodes.shift()\n    let contents = nodes\n    let attrStr = ''\n    for (const attrName in attributes) {\n      attrStr += ` ${attrName}=\"${attributes[attrName]}\"`\n    };\n\n    if (!Array.isArray(contents)) {\n      contents = [contents]\n    }\n\n    const contentsStr = contents.join('')\n\n    return `<${tagName}${attrStr}>${contentsStr}</${tagName}>`\n  }\n}\n\n/**\n * Normalize locale to lower case, as BCP 47 tags are case insensitive.\n * Phabricator ticket: T359822\n *\n * @param {unknown} locale\n * @return {string} normalized locale\n */\nfunction normalizeLocale (locale) {\n  return typeof locale === 'string' ? locale.toLowerCase() : locale\n}\n\n/**\n * Gets directionality of the first strongly directional codepoint\n *\n * This is the rule the BIDI algorithm uses to determine the directionality of\n * paragraphs ( http://unicode.org/reports/tr9/#The_Paragraph_Level ) and\n * FSI isolates ( http://unicode.org/reports/tr9/#Explicit_Directional_Isolates ).\n *\n * TODO: Does not handle BIDI control characters inside the text.\n * TODO: Does not handle unallocated characters.\n *\n * @param {string} text The text from which to extract initial directionality.\n * @return {string} Directionality (either 'ltr' or 'rtl')\n */\nfunction strongDirFromContent (text) {\n  const m = text.match(strongDirRegExp)\n  if (!m) {\n    return null\n  }\n  if (m[2] === undefined) {\n    return 'ltr'\n  }\n  return 'rtl'\n}\n\nexport { BananaEmitter as default, normalizeLocale }\n","/**\n * Abstract Syntax Tree for a localization message in 'Banana' format\n * @param {string} message\n * @param {Object} options options\n * @param {boolean} [options.wikilinks] whether the wiki style link syntax should be parsed or not\n */\nexport default function BananaMessage (message, { wikilinks = false } = {}) {\n  let pos = 0\n\n  // Try parsers until one works, if none work return null\n  function choice (parserSyntax) {\n    return () => {\n      for (let i = 0; i < parserSyntax.length; i++) {\n        const result = parserSyntax[i]()\n\n        if (result !== null) {\n          return result\n        }\n      }\n\n      return null\n    }\n  }\n\n  // Try several parserSyntax-es in a row.\n  // All must succeed; otherwise, return null.\n  // This is the only eager one.\n  function sequence (parserSyntax) {\n    const originalPos = pos\n\n    const result = []\n\n    for (let i = 0; i < parserSyntax.length; i++) {\n      const res = parserSyntax[i]()\n\n      if (res === null) {\n        pos = originalPos\n\n        return null\n      }\n\n      result.push(res)\n    }\n\n    return result\n  }\n\n  // Run the same parser over and over until it fails.\n  // Must succeed a minimum of n times; otherwise, return null.\n  function nOrMore (n, p) {\n    return () => {\n      const originalPos = pos\n\n      const result = []\n\n      let parsed = p()\n\n      while (parsed !== null) {\n        result.push(parsed)\n        parsed = p()\n      }\n\n      if (result.length < n) {\n        pos = originalPos\n\n        return null\n      }\n\n      return result\n    }\n  }\n\n  // Helpers -- just make parserSyntax out of simpler JS builtin types\n\n  function makeStringParser (s) {\n    const len = s.length\n\n    return () => {\n      let result = null\n\n      if (message.slice(pos, pos + len) === s) {\n        result = s\n        pos += len\n      }\n\n      return result\n    }\n  }\n\n  function makeRegexParser (regex) {\n    return () => {\n      const matches = message.slice(pos).match(regex)\n\n      if (matches === null) {\n        return null\n      }\n\n      pos += matches[0].length\n\n      return matches[0]\n    }\n  }\n\n  const whitespace = makeRegexParser(/^\\s+/)\n  const pipe = makeStringParser('|')\n  const colon = makeStringParser(':')\n  const backslash = makeStringParser('\\\\')\n  const anyCharacter = makeRegexParser(/^./)\n  const dollar = makeStringParser('$')\n  const digits = makeRegexParser(/^\\d+/)\n  const doubleQuote = makeStringParser('\"')\n  const singleQuote = makeStringParser('\\'')\n  // A literal is any character except the special characters in the message markup\n  // Special characters are: [, ], {, }, $, \\, <, >\n  // If wikilinks parsing is disabled, treat [ and ] as regular text.\n  const regularLiteral = wikilinks ? makeRegexParser(/^[^{}[\\]$<\\\\]/) : makeRegexParser(/^[^{}$<\\\\]/)\n  const regularLiteralWithoutBar = wikilinks ? makeRegexParser(/^[^{}[\\]$\\\\|]/) : makeRegexParser(/^[^{}$\\\\|]/)\n  const regularLiteralWithoutSpace = wikilinks ? makeRegexParser(/^[^{}[\\]$\\s]/) : makeRegexParser(/^[^{}$\\s]/)\n\n  // There is a general pattern:\n  // parse a thing;\n  // if it worked, apply transform,\n  // otherwise return null.\n  // But using this as a combinator seems to cause problems\n  // when combined with nOrMore().\n  // May be some scoping issue.\n  function transform (p, fn) {\n    return () => {\n      const result = p()\n      return result === null ? null : fn(result)\n    }\n  }\n\n  // Used to define \"literals\" within template parameters. The pipe\n  // character is the parameter delimeter, so by default\n  // it is not a literal in the parameter\n  function literalWithoutBar () {\n    const result = nOrMore(1, escapedOrLiteralWithoutBar)()\n\n    return result === null ? null : result.join('')\n  }\n\n  // Used to define \"literals\" within template parameters.\n  // The pipe character is the parameter delimeter, so by default\n  // it is not a literal in the parameter\n  function literal () {\n    const result = nOrMore(1, escapedOrRegularLiteral)()\n    return result === null ? null : result.join('')\n  }\n\n  const escapedOrLiteralWithoutSpace = choice([\n    escapedLiteral,\n    regularLiteralWithoutSpace\n  ])\n\n  // Used to define \"literals\" without spaces, in space-delimited situations\n  function literalWithoutSpace () {\n    const result = nOrMore(1, escapedOrLiteralWithoutSpace)()\n    return result === null ? null : result.join('')\n  }\n\n  function escapedLiteral () {\n    const result = sequence([backslash, anyCharacter])\n\n    return result === null ? null : result[1]\n  }\n\n  choice([escapedLiteral, regularLiteralWithoutSpace])\n  const escapedOrLiteralWithoutBar = choice([escapedLiteral, regularLiteralWithoutBar])\n  const escapedOrRegularLiteral = choice([escapedLiteral, regularLiteral])\n\n  function replacement () {\n    const result = sequence([dollar, digits])\n\n    if (result === null) {\n      return null\n    }\n\n    return ['REPLACE', parseInt(result[1], 10) - 1]\n  }\n\n  const templateName = transform(\n    // see $wgLegalTitleChars\n    // not allowing : due to the need to catch \"PLURAL:$1\"\n    makeRegexParser(/^[ !\"$&'()*,./0-9;=?@A-Z^_`a-z~\\x80-\\xFF+-]+/),\n\n    function (result) {\n      return result.toString()\n    }\n  )\n\n  function templateParam () {\n    const result = sequence([pipe, nOrMore(0, paramExpression)])\n\n    if (result === null) {\n      return null\n    }\n\n    const expr = result[1]\n\n    // use a \"CONCAT\" operator if there are multiple nodes,\n    // otherwise return the first node, raw.\n    return expr.length > 1 ? ['CONCAT'].concat(expr) : expr[0]\n  }\n\n  function templateWithReplacement () {\n    const result = sequence([templateName, colon, replacement])\n\n    return result === null ? null : [result[0], result[2]]\n  }\n\n  function templateWithOutReplacement () {\n    const result = sequence([templateName, colon, paramExpression])\n\n    return result === null ? null : [result[0], result[2]]\n  }\n\n  function templateWithOutFirstParameter () {\n    const result = sequence([templateName, colon])\n    return result === null ? null : [result[0], '']\n  }\n\n  const templateContents = choice([\n    function () {\n      const res = sequence([\n        // templates can have placeholders for dynamic\n        // replacement eg: {{PLURAL:$1|one car|$1 cars}}\n        // or no placeholders eg:{{GRAMMAR:genitive|{{SITENAME}}}\n        // Templates can also have empty first param eg:{{GENDER:|A|B|C}}\n        // to indicate current user in the context. We need to parse them without\n        // error, but can only fallback to gender neutral form.\n        choice([templateWithReplacement, templateWithOutReplacement, templateWithOutFirstParameter]),\n        nOrMore(0, templateParam)\n      ])\n\n      return res === null ? null : res[0].concat(res[1])\n    },\n    function () {\n      const res = sequence([templateName, nOrMore(0, templateParam)])\n\n      if (res === null) {\n        return null\n      }\n\n      return [res[0]].concat(res[1])\n    }\n  ])\n\n  const openTemplate = makeStringParser('{{')\n  const closeTemplate = makeStringParser('}}')\n  const openWikilink = makeStringParser('[[')\n  const closeWikilink = makeStringParser(']]')\n  const openExtlink = makeStringParser('[')\n  const closeExtlink = makeStringParser(']')\n\n  /**\n   * An expression in the form of {{...}}\n   */\n  function template () {\n    const result = sequence([openTemplate, templateContents, closeTemplate])\n\n    return result === null ? null : result[1]\n  }\n\n  function pipedWikilink () {\n    const result = sequence([\n      nOrMore(1, paramExpression),\n      pipe,\n      nOrMore(1, expression)\n    ])\n    return result === null\n      ? null\n      : [\n          ['CONCAT'].concat(result[0]),\n          ['CONCAT'].concat(result[2])\n        ]\n  }\n\n  function unpipedWikilink () {\n    const result = sequence([\n      nOrMore(1, paramExpression)\n    ])\n    return result === null\n      ? null\n      : [\n          ['CONCAT'].concat(result[0])\n        ]\n  }\n\n  const wikilinkContents = choice([\n    pipedWikilink,\n    unpipedWikilink\n  ])\n\n  function wikilink () {\n    let result = null\n\n    const parsedResult = sequence([\n      openWikilink,\n      wikilinkContents,\n      closeWikilink\n    ])\n\n    if (parsedResult !== null) {\n      const parsedLinkContents = parsedResult[1]\n      result = ['WIKILINK'].concat(parsedLinkContents)\n    }\n\n    return result\n  }\n\n  // this extlink MUST have inner contents, e.g. [foo] not allowed; [foo bar] [foo <i>bar</i>], etc. are allowed\n  function extlink () {\n    let result = null\n\n    const parsedResult = sequence([\n      openExtlink,\n      nOrMore(1, nonWhitespaceExpression),\n      whitespace,\n      nOrMore(1, expression),\n      closeExtlink\n    ])\n\n    if (parsedResult !== null) {\n      // When the entire link target is a single parameter, we can't use CONCAT, as we allow\n      // passing fancy parameters (like a whole jQuery object or a function) to use for the\n      // link. Check only if it's a single match, since we can either do CONCAT or not for\n      // singles with the same effect.\n      const target = parsedResult[1].length === 1\n        ? parsedResult[1][0]\n        : ['CONCAT'].concat(parsedResult[1])\n      result = [\n        'EXTLINK',\n        target,\n        ['CONCAT'].concat(parsedResult[3])\n      ]\n    }\n\n    return result\n  }\n\n  const asciiAlphabetLiteral = makeRegexParser(/^[A-Za-z]+/)\n\n  /**\n   * Checks if HTML is allowed\n   *\n   * @param {string} startTagName HTML start tag name\n   * @param {string} endTagName HTML start tag name\n   * @param {Object} attributes array of consecutive key value pairs,\n   *  with index 2 * n being a name and 2 * n + 1 the associated value\n   * @return {boolean} true if this is HTML is allowed, false otherwise\n   */\n  function isAllowedHtml (startTagName, endTagName, attributes, settings = {\n    // Whitelist for allowed HTML elements in wikitext.\n    // Self-closing tags are not currently supported.\n    allowedHtmlElements: ['b', 'bdi', 'del', 'i', 'ins', 'u', 'font', 'big', 'small', 'sub',\n      'sup', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'cite', 'code', 'em', 's', 'strike', 'strong',\n      'tt', 'var', 'div', 'center', 'blockquote', 'ol', 'ul', 'dl', 'table', 'caption', 'pre',\n      'ruby', 'rb', 'rp', 'rt', 'rtc', 'p', 'span', 'abbr', 'dfn', 'kbd', 'samp', 'data', 'time',\n      'mark', 'li', 'dt', 'dd'],\n    // Key tag name, value allowed attributes for that tag.\n    // Sourced from Parsoid's Sanitizer::setupAttributeWhitelist\n    allowedHtmlCommonAttributes: [\n      // HTML\n      'id',\n      'class',\n      'style',\n      'lang',\n      'dir',\n      'title',\n      // WAI-ARIA\n      'aria-describedby',\n      'aria-flowto',\n      'aria-hidden',\n      'aria-label',\n      'aria-labelledby',\n      'aria-owns',\n      'role',\n      // RDFa\n      // These attributes are specified in section 9 of\n      // https://www.w3.org/TR/2008/REC-rdfa-syntax-20081014\n      'about',\n      'property',\n      'resource',\n      'datatype',\n      'typeof',\n      // Microdata. These are specified by\n      // https://html.spec.whatwg.org/multipage/microdata.html#the-microdata-model\n      'itemid',\n      'itemprop',\n      'itemref',\n      'itemscope',\n      'itemtype'\n    ],\n\n    // Attributes allowed for specific elements.\n    // Key is element name in lower case\n    // Value is array of allowed attributes for that element\n    allowedHtmlAttributesByElement: {}\n  }) {\n    startTagName = startTagName.toLowerCase()\n    endTagName = endTagName.toLowerCase()\n    if (startTagName !== endTagName || settings.allowedHtmlElements.indexOf(startTagName) === -1) {\n      return false\n    }\n\n    const badStyle = /[\\000-\\010\\013\\016-\\037\\177]|expression|filter\\s*:|accelerator\\s*:|-o-link\\s*:|-o-link-source\\s*:|-o-replace\\s*:|url\\s*\\(|image\\s*\\(|image-set\\s*\\(/i\n\n    for (let i = 0, len = attributes.length; i < len; i += 2) {\n      const attributeName = attributes[i]\n      if (settings.allowedHtmlCommonAttributes.indexOf(attributeName) === -1 &&\n        (settings.allowedHtmlAttributesByElement[startTagName] || []).indexOf(attributeName) === -1) {\n        return false\n      }\n      if (attributeName === 'style' && attributes[i + 1].search(badStyle) !== -1) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  function doubleQuotedHtmlAttributeValue () {\n    const htmlDoubleQuoteAttributeValue = makeRegexParser(/^[^\"]*/)\n\n    const parsedResult = sequence([\n      doubleQuote,\n      htmlDoubleQuoteAttributeValue,\n      doubleQuote\n    ])\n    return parsedResult === null ? null : parsedResult[1]\n  }\n\n  function singleQuotedHtmlAttributeValue () {\n    const htmlSingleQuoteAttributeValue = makeRegexParser(/^[^']*/)\n    const parsedResult = sequence([\n      singleQuote,\n      htmlSingleQuoteAttributeValue,\n      singleQuote\n    ])\n    return parsedResult === null ? null : parsedResult[1]\n  }\n\n  function htmlAttribute () {\n    const htmlAttributeEquals = makeRegexParser(/^\\s*=\\s*/)\n    const parsedResult = sequence([\n      whitespace,\n      asciiAlphabetLiteral,\n      htmlAttributeEquals,\n      choice([\n        doubleQuotedHtmlAttributeValue,\n        singleQuotedHtmlAttributeValue\n      ])\n    ])\n    return parsedResult === null ? null : [parsedResult[1], parsedResult[3]]\n  }\n\n  function htmlAttributes () {\n    const parsedResult = nOrMore(0, htmlAttribute)()\n    // Un-nest attributes array due to structure of emitter operations.\n    return Array.prototype.concat.apply(['HTMLATTRIBUTES'], parsedResult)\n  }\n\n  // Parse, validate and escape HTML content in messages using a whitelisted tag names\n  // and attributes.\n  function html () {\n    let result = null\n\n    // Break into three sequence calls. That should allow accurate reconstruction of the original HTML, and requiring an exact tag name match.\n    // 1. open through closeHtmlTag\n    // 2. expression\n    // 3. openHtmlEnd through close\n    // This will allow recording the positions to reconstruct if HTML is to be treated as text.\n\n    const startOpenTagPos = pos\n\n    const openHtmlStartTag = makeStringParser('<')\n    const optionalForwardSlash = makeRegexParser(/^\\/?/)\n    const closeHtmlTag = makeRegexParser(/^\\s*>/)\n\n    const parsedOpenTagResult = sequence([\n      openHtmlStartTag,\n      asciiAlphabetLiteral,\n      htmlAttributes,\n      optionalForwardSlash,\n      closeHtmlTag\n    ])\n\n    if (parsedOpenTagResult === null) {\n      return null\n    }\n\n    const endOpenTagPos = pos\n    const startTagName = parsedOpenTagResult[1]\n\n    const parsedHtmlContents = nOrMore(0, expression)()\n\n    const startCloseTagPos = pos\n    const openHtmlEndTag = makeStringParser('</')\n\n    const parsedCloseTagResult = sequence([\n      openHtmlEndTag,\n      asciiAlphabetLiteral,\n      closeHtmlTag\n    ])\n\n    if (parsedCloseTagResult === null) {\n      // Closing tag failed. Return the start tag and contents.\n      return ['CONCAT', message.slice(startOpenTagPos, endOpenTagPos)]\n        .concat(parsedHtmlContents)\n    }\n\n    const endCloseTagPos = pos\n    const endTagName = parsedCloseTagResult[1]\n    const wrappedAttributes = parsedOpenTagResult[2]\n    const attributes = wrappedAttributes.slice(1)\n    if (isAllowedHtml(startTagName, endTagName, attributes)) {\n      result = ['HTMLELEMENT', startTagName, wrappedAttributes]\n        .concat(parsedHtmlContents)\n    } else {\n      // HTML is not allowed, so contents will remain how\n      // it was, while HTML markup at this level will be\n      // treated as text\n      // E.g. assuming script tags are not allowed:\n      //\n      // <script>[[Foo|bar]]</script>\n      //\n      // results in '&lt;script&gt;' and '&lt;/script&gt;'\n      // (not treated as an HTML tag), surrounding a fully\n      // parsed HTML link.\n      //\n      // Concatenate everything from the tag, flattening the contents.\n      const escapeHTML = (unsafeContent) => unsafeContent\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#039;')\n      result = ['CONCAT', escapeHTML(message.slice(startOpenTagPos, endOpenTagPos))]\n        .concat(parsedHtmlContents, escapeHTML(message.slice(startCloseTagPos, endCloseTagPos)))\n    }\n\n    return result\n  }\n\n  const nonWhitespaceExpression = choice([\n    template,\n    replacement,\n    wikilink,\n    extlink,\n    literalWithoutSpace\n  ])\n\n  const expression = choice([\n    template,\n    replacement,\n    wikilink,\n    extlink,\n    html,\n    literal\n  ])\n\n  const paramExpression = choice([template, replacement, literalWithoutBar])\n\n  function start () {\n    const result = nOrMore(0, expression)()\n\n    if (result === null) {\n      return null\n    }\n\n    return ['CONCAT'].concat(result)\n  }\n\n  const result = start()\n\n  /*\n   * For success, the pos must have gotten to the end of the input\n   * and returned a non-null.\n   * n.b. This is part of language infrastructure, so we do not throw an internationalizable message.\n   */\n  if (result === null || pos !== message.length) {\n    throw new Error('Parse error at position ' + pos.toString() + ' in input: ' + message)\n  }\n\n  return result\n}\n","import BananaEmitter, { normalizeLocale } from './emitter.js'\nimport BananaMessage from './ast.js'\n\nexport default class BananaParser {\n  /**\n   *\n   * @param {string} locale\n   * @param {Object} options options\n   * @param {boolean} [options.wikilinks] whether the wiki style link syntax should be parsed or not\n   */\n  constructor (locale, { wikilinks = false } = {}) {\n    this.locale = normalizeLocale(locale)\n    this.wikilinks = wikilinks\n    this.emitter = new BananaEmitter(this.locale)\n  }\n\n  parse (message, params) {\n    if (message.includes('{{') || message.includes('<') || (this.wikilinks && message.includes('['))) {\n      const ast = BananaMessage(message, { wikilinks: this.wikilinks })\n      return this.emitter.emit(ast, params)\n    } else {\n      return this.simpleParse(message, params)\n    }\n  }\n\n  simpleParse (message, parameters) {\n    return message.replace(/\\$(\\d+)/g, (str, match) => {\n      const index = parseInt(match, 10) - 1\n      return parameters[index] !== undefined ? parameters[index] : '$' + match\n    })\n  }\n}\n","import { normalizeLocale } from './emitter.js'\n\nexport default class BananaMessageStore {\n  constructor() {\n    this.sourceMap = new Map()\n  }\n\n  /**\n   *\n   * @param {Object} messageSource\n   * @param {string} locale BCP 47 language tag.  In its most common form\n   *   it can contain, in order: a language code, a script code, and a country\n   *   or region code, all separated by hyphens. A very minimal validation\n   *   is done.\n   */\n  load (messageSource, locale) {\n    if (typeof messageSource !== 'object') {\n      throw new Error('Invalid message source. Must be an object')\n    }\n\n    locale = normalizeLocale(locale)\n\n    if (locale) {\n      // Validate locale. This is a very minimal test for BCP 47 language tag\n      if (!/^[a-zA-Z0-9-]+$/.test(locale)) {\n        throw new Error(`Invalid locale ${locale}`)\n      }\n      // Validate messages\n      for (const key in messageSource) {\n        if (key.indexOf('@') === 0) continue\n        // Check if the message source is locale - message data\n        if (typeof messageSource[key] === 'object') {\n          // The passed locale argument is irrelevant here.\n          return this.load(messageSource)\n        }\n        if (typeof messageSource[key] !== 'string') {\n          throw new Error(`Invalid message for message ${key} in ${locale} locale.`)\n        }\n        break\n      }\n      if (this.sourceMap.has(locale)) {\n        this.sourceMap.set(locale, Object.assign(this.sourceMap.get(locale), messageSource))\n      } else {\n        this.sourceMap.set(locale, messageSource)\n      }\n    } else {\n      for (locale in messageSource) {\n        this.load(messageSource[locale], locale)\n      }\n    }\n  }\n\n  getMessage (key, locale) {\n    const localeMessages = this.sourceMap.get(normalizeLocale(locale))\n    return localeMessages ? localeMessages[key] : null\n  }\n\n  /**\n   * Check if the given locale is present in the message store or not\n   * @param {string} locale\n   * @returns {boolean}\n   */\n  hasLocale (locale) {\n    return this.sourceMap.has(locale)\n  }\n}\n","import BananaParser from './parser.js'\nimport BananaMessageStore from './messagestore.js'\nimport BananaEmitter, { normalizeLocale } from './emitter.js'\nimport fallbacks from './languages/fallbacks.json' with { type: 'json' }\n\nexport default class Banana {\n  /**\n   * @param {string} locale\n   * @param {Object} options options\n   * @param {string} [options.finalFallback] Final fallback locale\n   * @param {Object|undefined} [options.messages] messages\n   * @param {boolean} [options.wikilinks] whether the wiki style link syntax should be parsed or not\n   */\n  constructor (locale, { finalFallback = 'en', messages = undefined, wikilinks = false } = {}\n  ) {\n    this.locale = normalizeLocale(locale)\n    this.parser = new BananaParser(this.locale, { wikilinks })\n    this.messageStore = new BananaMessageStore()\n    if (messages) {\n      this.load(messages, this.locale)\n    }\n    this.finalFallback = finalFallback\n    this.wikilinks = wikilinks\n  }\n\n  /**\n   * Load localized messages for a locale\n   * If locale not provided, the keys in messageSource will be used as locales.\n   * @param {Object} messageSource\n   * @param {string} [locale]\n   */\n  load (messageSource, locale) {\n    return this.messageStore.load(messageSource, locale || this.locale)\n  }\n\n  i18n (key, ...parameters) {\n    return this.parser.parse(this.getMessage(key), parameters)\n  }\n\n  setLocale (locale) {\n    this.locale = normalizeLocale(locale)\n    // Update parser\n    this.parser = new BananaParser(this.locale, { wikilinks: this.wikilinks })\n  }\n\n  getFallbackLocales () {\n    return [...(fallbacks[this.locale] || []), this.finalFallback]\n  }\n\n  getMessage (messageKey) {\n    let locale = this.locale\n    let fallbackIndex = 0\n    const fallbackLocales = this.getFallbackLocales(this.locale)\n    while (locale) {\n      // Iterate through locales starting at most-specific until\n      // localization is found. As in fi-Latn-FI, fi-Latn and fi.\n      const localeParts = locale.split('-')\n      let localePartIndex = localeParts.length\n\n      do {\n        const tryingLocale = localeParts.slice(0, localePartIndex).join('-')\n\n        const message = this.messageStore.getMessage(messageKey, tryingLocale)\n\n        if (typeof message === 'string') {\n          return message\n        }\n\n        localePartIndex--\n      } while (localePartIndex)\n\n      locale = fallbackLocales[fallbackIndex]\n      fallbackIndex++\n    }\n    return messageKey\n  }\n\n  /**\n   * Register a plugin for the library's message parser\n   * Example:\n   * <pre>\n   *   banana.registerParserPlugin('foobar', nodes => {\n   *     return nodes[0] === 'foo' ? nodes[1] : nodes[2]\n   *   }\n   * </pre>\n   * Usage:\n   * <pre>\n   *   banana.i18n('{{foobar:foo|first message|second message}}') --> 'first message'\n   *   banana.i18n('{{foobar:bar|first message|second message}}') --> 'second message'\n   * </pre>\n   * See emitter.js for built-in parser operations.\n   * @param {string} name - the name of the plugin\n   * @param {Function} plugin - the plugin function. It receives nodes as argument -\n   * a mixed array corresponding to the pipe-separated objects in the operation.\n   */\n  registerParserPlugin (name, plugin) {\n    BananaEmitter.prototype[name] = plugin\n  }\n}\n"],"names":["locale","count","forms","explicitPluralPattern","index","form","pluralFormIndex","number","pluralForms","pluralRules","pluralCategories","f","num","integer","transformTable","convertedNumber","tmp","item","numberString","localeWithFallbacks","fallbackLocales","fallbacks","word","gender","language","DIGITTRANSFORMTABLE","HebrewLanguage","BananaLanguage","BosnianLanguage","DolnoserbskiLanguage","HornjoserbsceLanguage","aou","origWord","l$2","SlovenianLanguage","l$1","ArmenianLanguage","i$1","HungarianLanguage","endAllative","jot","hyphen","ending","UkrainianLanguage","r","FinnishLanguage","IrishLanguage","LatinLanguage","OssetianLanguage","RussianLanguage","strongDirRegExp","normalizeLocale","languages","node","replacements","ret","subnodes","operation","n","nodes","result","anchor","page","url","dir","strongDirFromContent","isInteger","mapping","i","len","tagName","attributes","contents","attrStr","attrName","contentsStr","text","m","BananaMessage","message","wikilinks","pos","choice","parserSyntax","sequence","originalPos","res","nOrMore","p","parsed","makeStringParser","s","makeRegexParser","regex","matches","whitespace","pipe","colon","backslash","anyCharacter","dollar","digits","doubleQuote","singleQuote","regularLiteral","regularLiteralWithoutBar","regularLiteralWithoutSpace","transform","fn","literalWithoutBar","escapedOrLiteralWithoutBar","literal","escapedOrRegularLiteral","escapedOrLiteralWithoutSpace","escapedLiteral","literalWithoutSpace","replacement","templateName","templateParam","paramExpression","expr","templateWithReplacement","templateWithOutReplacement","templateWithOutFirstParameter","templateContents","openTemplate","closeTemplate","openWikilink","closeWikilink","openExtlink","closeExtlink","template","pipedWikilink","expression","unpipedWikilink","wikilinkContents","wikilink","parsedResult","parsedLinkContents","extlink","nonWhitespaceExpression","asciiAlphabetLiteral","isAllowedHtml","startTagName","endTagName","settings","badStyle","attributeName","doubleQuotedHtmlAttributeValue","htmlDoubleQuoteAttributeValue","singleQuotedHtmlAttributeValue","htmlSingleQuoteAttributeValue","htmlAttribute","htmlAttributeEquals","htmlAttributes","html","startOpenTagPos","openHtmlStartTag","optionalForwardSlash","closeHtmlTag","parsedOpenTagResult","endOpenTagPos","parsedHtmlContents","startCloseTagPos","openHtmlEndTag","parsedCloseTagResult","endCloseTagPos","wrappedAttributes","escapeHTML","unsafeContent","start","BananaParser","BananaEmitter","params","ast","parameters","str","match","BananaMessageStore","messageSource","key","localeMessages","Banana","finalFallback","messages","messageKey","fallbackIndex","localeParts","localePartIndex","tryingLocale","name","plugin"],"mappings":"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"}